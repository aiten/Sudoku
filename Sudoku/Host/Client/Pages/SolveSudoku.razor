@page "/solvesudoku"
@using Sudoku.Host.Shared
@using Sudoku.Solve.Abstraction
@inject HttpClient Http

<PageTitle>Solve Sudoku</PageTitle>

@if (_sudokuResult == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="mytoolbar">
        <h1>
            Solve sudoku
            <span class='right'>
                <button onclick="@OnNew">New</button>
            </span>
        </h1>
    </div>


    <div class="grid-container-fluid">
        <div class="row">
            <div class="col colno rowno"> </div>
            @{
                for (char ch = 'A'; ch <= 'I'; ch++)
                {
                    <div class="col rowno">@ch</div>
                }
            }
        </div >

        @{
            for (int row = 0; row < 9; row++)
            {
                <div class="row">
                    <div class="col colno">@(row + 1)</div>
                    @{
                        for (int col = 0; col < 9; col++)
                        {
                            var field = _sudokuResult.Field.FirstOrDefault(f => f.Row == row && f.Col == col);
                            <div class="col scell">
                                <SudokuCell
                                    Field=@field
                                    OnNextNo="@(async () => { await OnNextNo(@field.Row, @field.Col); })"
                                    OnSetNo="@(async (no) => { await OnSetNextNo(@field.Row, @field.Col, no); })">
                                </SudokuCell>
                            </div>
                        }
                    }
                </div>
            }
        }
    </div>
    <div>
        SolutionCount = @SolutionCount
    </div>
}

@code {

    private IEnumerable<string> _sudoku = new List<string>
    {
        "1, ,8,5, , ,2,3,4",
        "5, , ,3, ,2,1,7,8",
        " , , ,8, , ,5,6,9",
        "8, , ,6, ,5,7,9,3",
        " , ,5,9, , ,4,8,1",
        "3, , , , ,8,6,5,2",
        "9,8, ,2, ,6,3,1, ",
        " , , , , , ,8, , ",
        " , , ,7,8, ,9, , ",
    };

    private SudokuSolveResult? _sudokuResult;
    private int? SolutionCount { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await StartCalc();
    }

    private string ToFirstQuery(IEnumerable<string> sudoku)
    {
        return "?sudoku=" + string.Join("&sudoku=", sudoku);
    }

    private async Task<SudokuSolveResult?> GetResult(IEnumerable<string> sudoku)
    {
        try
        {
            return await Http.GetFromJsonAsync<SudokuSolveResult>("Sudoku" + ToFirstQuery(_sudoku));
        }
        catch (Exception exception)
        {
            return null;
        }
    }

    private async Task StartCalc()
    {
        _sudokuResult = await GetResult(_sudoku);
        await GetSolutionCount(); // do not wait
    }

    private async Task OnNew()
    {
        _sudoku = new[] { "" };
        await StartCalc();
    }

    private async Task OnNextNo(int row, int col)
    {
        try
        {
            var query = ToFirstQuery(_sudoku);
            query += $"&row={row}&col={col}";
            _sudoku = await Http.GetFromJsonAsync<IEnumerable<string>>("Sudoku/next" + query);
            await StartCalc();
        }
        catch (Exception exception)
        {
        }
    }

    private async Task OnSetNextNo(int row, int col, int no)
    {
        try
        {
            var query = ToFirstQuery(_sudoku);
            query += $"&row={row}&col={col}&no={no}";
            _sudoku = await Http.GetFromJsonAsync<IEnumerable<string>>("Sudoku/set" + query);
            await StartCalc();
        }
        catch (Exception exception)
        {
        }
    }

    private async Task GetSolutionCount()
    {
        try
        {
            SolutionCount = null;
            var query = ToFirstQuery(_sudoku);
            var solutionCount = await Http.GetFromJsonAsync<int>("Sudoku/solutioncount" + query);
            SolutionCount = solutionCount;
        }
        catch (Exception exception)
        {
        }
    }

}