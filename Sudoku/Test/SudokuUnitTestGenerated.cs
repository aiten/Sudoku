/*
  This file is part of Sudoku - A library to solve a sudoku.

  Copyright (c) Herbert Aitenbichler

  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
  to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 
*/

namespace Sudoku.Test
{
    using Xunit;

    public class SudokuUnitTestGenerated : SudokuBaseUnitTest
    {
        [Fact]
        public void Test10XYZWing1()
        {
            CheckSudoku(new[]
              {
                "8,6,9,4,5,3,7,2,1",
                " , , ,9,2,1,5,6,8",
                "2,1,5,8, , ,4,3,9",
                "6,2,1,5,3,4,9,8,7",
                "4, ,7,6,1, ,3,5,2",
                " , , ,2, , ,1,4,6",
                " , , ,1, ,2,8, ,3",
                "9,3,2,7,8,5,6,1,4",
                "1, , ,3,4, ,2, ,5",
              },
              new ExpectResult[]
              {
                new (8, 1, "8", "8 - 7\nB8:7:61:60:11"),
              },
              false
            );
        }
        [Fact]
        public void Test10XYZWing2()
        {
            CheckSudoku(new[]
              {
                "6,7,3, ,8, ,2, ,9",
                "5,1,4, ,9,2, , ,3",
                "9,8,2, , , , , ,5",
                "1,6,7,3,5,9, , ,2",
                "8, ,9, ,1, ,5,3,6",
                " , ,5,8, , ,7,9,1",
                " , ,6,1,4, ,9,2,8",
                " , ,1, , ,8,3,5,4",
                " , ,8, , , ,1,6,7",
              },
              new ExpectResult[]
              {
                new (2, 4, "3,7", "3,7 - 6\nB8:6:23:26:13"),
                new (2, 5, "1,3,4,7", "1,3,4,7 - 6\nB8:6:23:26:13"),
                new (5, 5, "6", "6 - 4\nB1:4:C:6"),
              },
              false
            );
        }
        [Fact]
        public void Test11SueDeCoq1()
        {
            CheckSudoku(new[]
              {
                "1,4,8,3,2,7, , , ",
                "2,6,7,5,9,4,3,8,1",
                " ,3, ,8,6,1,7,4,2",
                "3,9,6,4,5,2,1,7,8",
                "7,1,4,6,3,8,9,2,5",
                "8,5,2, , ,9, , , ",
                " ,8, ,2, ,6, , ,7",
                " ,7, , ,8,5,2, , ",
                " ,2,1, , ,3,8, , ",
              },
              new ExpectResult[]
              {
              }
            );
        }
        [Fact]
        public void Test11SueDeCoq2()
        {
            CheckSudoku(new[]
              {
                " , , ,7,2,8,4,1, ",
                "1, ,2,9,3, ,8,7, ",
                " , , ,1, , , , ,9",
                "6,8, , , , , , , ",
                " , , , , ,9,6, ,1",
                " ,1, , , , , , ,8",
                "7, , ,4, , ,1, , ",
                " , ,6,5, , ,3,9, ",
                "5, ,1, , , , , , ",
              },
              new ExpectResult[]
              {
              }
            );
        }
        [Fact]
        public void Test12Skyscraper1()
        {
            CheckSudoku(new[]
              {
                "6,9,7, , , , , ,2",
                " , ,1,9,7,2, ,6,3",
                " , ,3, , ,6,7,9, ",
                "9,1,2, , , ,6, ,7",
                "3,7,4,2,6, ,9,5, ",
                "8,6,5,7, ,9, ,2,4",
                "1,4,8,6,9,3,2,7,5",
                "7, ,9, ,2,4, , ,6",
                " , ,6,8, ,7, , ,9",
              },
              new ExpectResult[]
              {
              }
            );
        }
        [Fact]
        public void Test12Skyscraper2()
        {
            CheckSudoku(new[]
              {
                " , ,1, ,2,8,7,5,9",
                " ,8,7,9, ,5,1,3,2",
                "9,5,2,1,7,3,4,8,6",
                " ,2, ,7, , ,3,4, ",
                " , , ,5, , ,2,7, ",
                "7,1,4,8,3,2,6,9,5",
                " , , , ,9, ,8,1,7",
                " ,7,8, ,5,1,9,6,3",
                "1,9, , ,8,7,5,2,4",
              },
              new ExpectResult[]
              {
                new (6, 0, "2,3,4,5", "2,3,4,5 - 6\nB8:6:61:65:82"),
                new (6, 2, "3,5", "3,5 - 6\nB8:6:61:65:82"),
              },
              false
            );
        }
        [Fact]
        public void Test1NotPossible()
        {
            CheckSudoku(new[]
              {
                "1,2,3,4,5,6,7,8, ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , ,9",
              },
              new ExpectResult[]
              {
                new (0, 8, "", ""),
              }
            );
        }
        [Fact]
        public void Test1Singleton()
        {
            CheckSudoku(new[]
              {
                "1,2,3,4,5,6,7,8, ",
                "4, , , , , , , , ",
                "5, , , , , , , , ",
                "2, , ,1,3,4, , , ",
                "3, , ,2,6,5, , , ",
                "6, , ,7,8, , , , ",
                "7, , , , , , , , ",
                "8, , , , , , , , ",
                " , , , , , , , , ",
              },
              new ExpectResult[]
              {
                new (8, 0, "9", "9"),
                new (5, 5, "9", "9"),
                new (0, 8, "9", "9"),
              }
            );
        }
        [Fact]
        public void Test2KreuzendeLinien1b1()
        {
            CheckSudoku(new[]
              {
                "1, , , , , , , , ",
                " , , ,1, , , , , ",
                " , , , , , , ,2, ",
                " , , , , , , , , ",
                " , , , , , ,1, , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
              },
              new ExpectResult[]
              {
                new (2, 8, "1", "1 - 3,4,5,6,7,8,9\nB1:3:X:1\nB1:4:X:1\nB1:5:X:1\nB1:6:X:1\nB1:7:X:1\nB1:8:X:1\nB1:9:X:1"),
              }
            );
        }
        [Fact]
        public void Test2KreuzendeLinien2b1()
        {
            CheckSudoku(new[]
              {
                "1, , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " ,1, , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , ,2, , , , , , ",
                " , , , , , ,1, , ",
                " , , , , , , , , ",
              },
              new ExpectResult[]
              {
                new (8, 2, "1", "1 - 3,4,5,6,7,8,9\nB1:3:X:1\nB1:4:X:1\nB1:5:X:1\nB1:6:X:1\nB1:7:X:1\nB1:8:X:1\nB1:9:X:1"),
              }
            );
        }
        [Fact]
        public void Test2KreuzendeLinien3b1()
        {
            CheckSudoku(new[]
              {
                "1, , , , , ,2, , ",
                "2, , , , , , , , ",
                " , , , , ,1, , , ",
                " , , , ,2, , , , ",
                " , , , , , , , , ",
                " , , , ,1, , , , ",
                " , , , , ,2, , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
              },
              new ExpectResult[]
              {
                new (2, 3, "2", "2 - 3,4,5,6,7,8,9\nB1:3:X:2\nB1:4:X:2\nB1:5:X:2\nB1:6:X:2\nB1:7:X:2\nB1:8:X:2\nB1:9:X:2"),
              }
            );
        }
        [Fact]
        public void Test3ParalleleLinienb1()
        {
            CheckSudoku(new[]
              {
                "1, , , , , , , , ",
                " , , ,1, , , , , ",
                " , , , , , ,2,3, ",
                " , , , , , , , , ",
                " ,1, , , , , , , ",
                " , , , , , , , , ",
                " , ,2, , , , , , ",
                " , ,3, , , , , , ",
                " , , , , , , , , ",
              },
              new ExpectResult[]
              {
                new (8, 2, "1", "1 - 4,5,6,7,8,9\nB1:4:X:1\nB1:5:X:1\nB1:6:X:1\nB1:7:X:1\nB1:8:X:1\nB1:9:X:1"),
                new (2, 8, "1", "1 - 4,5,6,7,8,9\nB1:4:X:1\nB1:5:X:1\nB1:6:X:1\nB1:7:X:1\nB1:8:X:1\nB1:9:X:1"),
              }
            );
        }
        [Fact]
        public void Test4Blockade1col()
        {
            CheckSudoku(new[]
              {
                " , , , , , , , ,1",
                "2, ,4, , , , , , ",
                "3, ,5, , , , , , ",
                " , ,6, , , , , , ",
                " , ,7, , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                "1, , , , , , , , ",
              },
              new ExpectResult[]
              {
                new (5, 2, "1", "1 - 2,3,8,9\nB1:2:C:1\nB1:3:C:1\nB1:8:C:1\nB1:9:C:1"),
              }
            );
        }
        [Fact]
        public void Test4Blockade1row()
        {
            CheckSudoku(new[]
              {
                " ,2,3, , , , , ,1",
                " , , , , , , , , ",
                " ,4,5,6,7, , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                "1, , , , , , , , ",
              },
              new ExpectResult[]
              {
                new (2, 5, "1", "1 - 2,3,8,9\nB1:2:R:1\nB1:3:R:1\nB1:8:R:1\nB1:9:R:1"),
              }
            );
        }
        [Fact]
        public void Test4Blockade1s3()
        {
            CheckSudoku(new[]
              {
                " , , , , , , , , ",
                " , , ,1, , , , , ",
                " , , , , , ,1, , ",
                " ,1, , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , ,1, , , , , , ",
              },
              new ExpectResult[]
              {
                new (0, 0, "1", "1 - 2,3,4,5,6,7,8,9\nB1:2:X:1\nB1:3:X:1\nB1:4:X:1\nB1:5:X:1\nB1:6:X:1\nB1:7:X:1\nB1:8:X:1\nB1:9:X:1"),
              }
            );
        }
        [Fact]
        public void Test4Blockade2()
        {
            CheckSudoku(new[]
              {
                " ,8, , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , ,2,3,4,5,6,7",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " ,9, , , , , , , ",
              },
              new ExpectResult[]
              {
                new (4, 1, "1", "1"),
              }
            );
        }
        [Fact]
        public void Test4Blockade2neu()
        {
            CheckSudoku(new[]
              {
                " , ,1,2,3,4,5,6,7",
                " , ,2, , , , , , ",
                " ,7,3, ,5, ,4, ,2",
                " , ,7,6,4,5,3,2,1",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
              },
              new ExpectResult[]
              {
                new (1, 0, "4,5", "4,5 - 6,8,9\nB2P:6:C:6,8,9:0,2,3\nB2P:8:X:8,9:0,1\nB2P:9:X:8,9:0,1"),
                new (2, 0, "6", "6 - 8,9\nB2P:8:X:8,9:0,1\nB2P:9:X:8,9:0,1"),
                new (4, 0, "1,2,3,4,5", "1,2,3,4,5 - 6,8,9\nB2P:6:C:6,8,9:0,2,3\nB2P:8:X:8,9:0,1\nB2P:9:X:8,9:0,1"),
                new (5, 0, "1,2,3,4,5", "1,2,3,4,5 - 6,8,9\nB2P:6:C:6,8,9:0,2,3\nB2P:8:X:8,9:0,1\nB2P:9:X:8,9:0,1"),
                new (6, 0, "1,2,3,4,5,7", "1,2,3,4,5,7 - 6,8,9\nB2P:6:C:6,8,9:0,2,3\nB2P:8:C:6,8,9:0,2,3\nB2P:9:C:6,8,9:0,2,3"),
                new (7, 0, "1,2,3,4,5,7", "1,2,3,4,5,7 - 6,8,9\nB2P:6:C:6,8,9:0,2,3\nB2P:8:C:6,8,9:0,2,3\nB2P:9:C:6,8,9:0,2,3"),
                new (8, 0, "1,2,3,4,5,7", "1,2,3,4,5,7 - 6,8,9\nB2P:6:C:6,8,9:0,2,3\nB2P:8:C:6,8,9:0,2,3\nB2P:9:C:6,8,9:0,2,3"),
                new (1, 1, "4,5", "4,5 - 6,8,9\nB2:6:X:8,9:0,1,6\nB2P:8:X:8,9:0,1\nB2P:9:X:8,9:0,1"),
                new (4, 1, "1,2,3,4,5,6", "1,2,3,4,5,6 - 8,9\nB2P:8:X:8,9:0,1\nB2P:9:X:8,9:0,1"),
                new (5, 1, "1,2,3,4,5,6", "1,2,3,4,5,6 - 8,9\nB2P:8:X:8,9:0,1\nB2P:9:X:8,9:0,1"),
                new (6, 1, "1,2,3,4,5,6", "1,2,3,4,5,6 - 8,9\nB2P:8:C:8,9:0,3\nB2P:9:C:8,9:0,3"),
                new (7, 1, "1,2,3,4,5,6", "1,2,3,4,5,6 - 8,9\nB2P:8:C:8,9:0,3\nB2P:9:C:8,9:0,3"),
                new (8, 1, "1,2,3,4,5,6", "1,2,3,4,5,6 - 8,9\nB2P:8:C:8,9:0,3\nB2P:9:C:8,9:0,3"),
                new (4, 2, "4,5,6", "4,5,6 - 8,9\nB2P:8:X:8,9:0,1\nB2P:9:X:8,9:0,1"),
                new (5, 2, "4,5,6", "4,5,6 - 8,9\nB2P:8:X:8,9:0,1\nB2P:9:X:8,9:0,1"),
               },
              false
            );
        }
        [Fact]
        public void Test4Blockade2neu2()
        {
            CheckSudoku(new[]
              {
                " , , ,1,2,3,4,5,6",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                "7,8,9, , , , , , ",
              },
              new ExpectResult[]
              {
                new (1, 0, "1,2,3,4,5,6", "1,2,3,4,5,6 - 8,9\nB2P:8:X:7,8,9:0,1,2\nB2P:9:X:7,8,9:0,1,2"),
                new (2, 0, "1,2,3,4,5,6", "1,2,3,4,5,6 - 8,9\nB2P:8:X:7,8,9:0,1,2\nB2P:9:X:7,8,9:0,1,2"),
                new (1, 1, "1,2,3,4,5,6", "1,2,3,4,5,6 - 7,9\nB2P:7:X:7,8,9:0,1,2\nB2P:9:X:7,8,9:0,1,2"),
                new (2, 1, "1,2,3,4,5,6", "1,2,3,4,5,6 - 7,9\nB2P:7:X:7,8,9:0,1,2\nB2P:9:X:7,8,9:0,1,2"),
                new (1, 2, "1,2,3,4,5,6", "1,2,3,4,5,6 - 7,8\nB2P:7:X:7,8,9:0,1,2\nB2P:8:X:7,8,9:0,1,2"),
                new (2, 2, "1,2,3,4,5,6", "1,2,3,4,5,6 - 7,8\nB2P:7:X:7,8,9:0,1,2\nB2P:8:X:7,8,9:0,1,2"),
              },
              false
            );
        }
        [Fact]
        public void Test4Blockade2neu2x()
        {
            CheckSudoku(new[]
              {
                " , , ,1,2,3,4,5,6",
                " , , , , , ,3,2,1",
                " , , , , , , , , ",
                " , , , , , , , , ",
                "6, , , , , , , , ",
                "4, , , , , , , , ",
                " , ,4, , , , , , ",
                " , ,5, , , , , , ",
                "7,8,9, , , , , , ",
              },
              new ExpectResult[]
              {
                new (1, 0, "5", "5 - 8,9\nB2P:8:X:7,8,9:0,1,2\nB2P:9:X:7,8,9:0,1,2"),
                new (2, 0, "1,2,3", "1,2,3 - 5,8,9\nB2:5:R:4,5,6,7,8,9:3,4,5,6,7,8\nB2P:8:X:7,8,9:0,1,2\nB2P:9:X:7,8,9:0,1,2"),
                new (1, 1, "4,5", "4,5 - 6,7,9\nB3:6:C:6,7\nB2P:7:X:7,8,9:0,1,2\nB2P:9:X:7,8,9:0,1,2"),
                new (2, 1, "1,2,3", "1,2,3 - 4,5,6,7,9\nB2:4:R:4,5,6,7,8,9:3,4,5,6,7,8\nB2:5:R:4,5,6,7,8,9:3,4,5,6,7,8\nB2:6:R:4,5,6,7,8,9:3,4,5,6,7,8\nB2P:7:X:7,8,9:0,1,2\nB2P:9:X:7,8,9:0,1,2"),
                new (1, 2, "6", "6 - 7,8\nB2P:7:X:7,8,9:0,1,2\nB2P:8:X:7,8,9:0,1,2"),
                new (2, 2, "1,2,3", "1,2,3 - 6,7,8\nB2:6:R:4,5,6,7,8,9:3,4,5,6,7,8\nB2P:7:X:7,8,9:0,1,2\nB2P:8:X:7,8,9:0,1,2"),
                new (2, 3, "4,5,6", "4,5,6 - 7,8,9\nB2:7:R:7,8,9:6,7,8\nB2:8:R:7,8,9:6,7,8\nB2:9:R:7,8,9:6,7,8"),
                new (2, 4, "4,5,6", "4,5,6 - 7,8,9\nB2:7:R:7,8,9:6,7,8\nB2:8:R:7,8,9:6,7,8\nB2:9:R:7,8,9:6,7,8"),
                new (2, 5, "4,5,6", "4,5,6 - 7,8,9\nB2:7:R:7,8,9:6,7,8\nB2:8:R:7,8,9:6,7,8\nB2:9:R:7,8,9:6,7,8"),
              },
              false
            );
        }
        [Fact]
        public void Test4Blockade2neu3()
        {
            CheckSudoku(new[]
              {
                " , , , ,1, ,2, , ",
                " ,3, ,4, , , , , ",
                "9, ,4, , , , , , ",
                " , , , , , , , , ",
                "8, ,7, , , , , , ",
                " ,5, ,6, , , , , ",
                " , , ,3, , , , , ",
                " , , ,5, , , , , ",
                "6,7,8,9, , , , , ",
              },
              new ExpectResult[]
              {
                new (0, 5, "3,9", "3,9 - 5,6,7,8\nB2P:5:R:5,6,7,8:0,1,2,3\nB2P:6:R:5,6,7,8:0,1,2,3\nB2P:7:R:5,6,7,8:0,1,2,3\nB2P:8:R:5,6,7,8:0,1,2,3"),
                new (3, 5, "2,3,4,5,7,8,9", "2,3,4,5,7,8,9 - 1\nB3:1:C:6,7,8"),
                new (4, 5, "2,3,4,5,9", "2,3,4,5,9 - 1\nB3:1:C:6,7,8"),
                new (5, 5, "2,3,4,7,8,9", "2,3,4,7,8,9 - 1\nB3:1:C:6,7,8"),
                new (6, 6, "1,4,6,7,8,9", "1,4,6,7,8,9 - 5\nB3:5:R:0,2"),
                new (7, 6, "1,4,6,7,8,9", "1,4,6,7,8,9 - 3\nB3:3:R:0,2"),
                new (0, 7, "3,4,9", "3,4,9 - 5,6,7,8\nB2P:5:R:5,6,7,8:0,1,2,3\nB2P:6:R:5,6,7,8:0,1,2,3\nB2P:7:R:5,6,7,8:0,1,2,3\nB2P:8:R:5,6,7,8:0,1,2,3"),
                new (6, 7, "1,2,4,6,7,8,9", "1,2,4,6,7,8,9 - 5\nB3:5:R:0,2"),
                new (7, 7, "1,2,4,6,7,8,9", "1,2,4,6,7,8,9 - 3\nB3:3:R:0,2"),
                new (0, 8, "3,4,9", "3,4,9 - 5,6,7,8\nB2P:5:R:5,6,7,8:0,1,2,3\nB2P:6:R:5,6,7,8:0,1,2,3\nB2P:7:R:5,6,7,8:0,1,2,3\nB2P:8:R:5,6,7,8:0,1,2,3"),
                new (6, 8, "1,2,4,6,7,8,9", "1,2,4,6,7,8,9 - 5\nB3:5:R:0,2"),
                new (7, 8, "1,2,4,6,7,8,9", "1,2,4,6,7,8,9 - 3\nB3:3:R:0,2"),
              },
              false
            );
        }
        [Fact]
        public void Test4Blockade3neu()
        {
            CheckSudoku(new[]
              {
                "1, , , , , ,4, , ",
                "2, ,5, , , , ,7, ",
                "3, ,6, ,8, , , , ",
                " , ,2, , , , , , ",
                " , , , , , , , , ",
                " , ,1,7,9,3,5,2,6",
                " , , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
              },
              new ExpectResult[]
              {
                new (3, 0, "5,6,7,9", "5,6,7,9 - 4,8\nB2P:4:X:4,8:6,7\nB2P:8:X:4,8:6,7"),
                new (4, 0, "5,6,7,9", "5,6,7,9 - 4,8\nB2P:4:X:4,8:6,7\nB2P:8:X:4,8:6,7"),
                new (3, 1, "3,5,6", "3,5,6 - 4,7,8,9\nB2P:4:X:4,8:6,7\nB2P:7:C:4,7,8,9:0,1,2,5\nB2P:8:X:4,8:6,7\nB2P:9:C:4,7,8,9:0,1,2,5"),
                new (4, 1, "3,5,6", "3,5,6 - 4,7,8,9\nB2P:4:X:4,8:6,7\nB2P:7:C:4,7,8,9:0,1,2,5\nB2P:8:X:4,8:6,7\nB2P:9:C:4,7,8,9:0,1,2,5"),
                new (5, 1, "8", "8 - 4\nB3:4:C:1,2"),
                new (6, 1, "1,2,3,5,6", "1,2,3,5,6 - 4,7,8,9\nB2P:4:C:4,7,8,9:0,1,2,5\nB2P:7:C:4,7,8,9:0,1,2,5\nB2P:8:C:4,7,8,9:0,1,2,5\nB2P:9:C:4,7,8,9:0,1,2,5"),
                new (7, 1, "1,2,3,5,6", "1,2,3,5,6 - 4,7,8,9\nB2P:4:C:4,7,8,9:0,1,2,5\nB2P:7:C:4,7,8,9:0,1,2,5\nB2P:8:C:4,7,8,9:0,1,2,5\nB2P:9:C:4,7,8,9:0,1,2,5"),
                new (8, 1, "1,2,3,5,6", "1,2,3,5,6 - 4,7,8,9\nB2P:4:C:4,7,8,9:0,1,2,5\nB2P:7:C:4,7,8,9:0,1,2,5\nB2P:8:C:4,7,8,9:0,1,2,5\nB2P:9:C:4,7,8,9:0,1,2,5"),
                new (4, 2, "3,7,9", "3,7,9 - 4,8\nB2P:4:X:4,8:6,7\nB2P:8:X:4,8:6,7"),
              },
              false
            );
        }
        [Fact]
        public void Test4Blockade31()
        {
            CheckSudoku(new[]
              {
                " , , , ,2,3, , ,1",
                " ,4,5, , ,1, , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                "2, , , , , , , , ",
                " , , , , , , , , ",
                " , , , , , , , , ",
                "3, , , , , , , , ",
                " , , , , , , , , ",
              },
              new ExpectResult[]
              {
                new (2, 0, "1", "1 - 6,7,8,9\nB2P:6:X:6,7,8,9:0,1,2,3\nB2P:7:X:6,7,8,9:0,1,2,3\nB2P:8:X:6,7,8,9:0,1,2,3\nB2P:9:X:6,7,8,9:0,1,2,3"),
                new (2, 1, "2,3", "2,3 - 1,6,7,8,9\nB2:1:X:6,7,8,9:0,1,2,3,6\nB2P:6:X:6,7,8,9:0,1,2,3\nB2P:7:X:6,7,8,9:0,1,2,3\nB2P:8:X:6,7,8,9:0,1,2,3\nB2P:9:X:6,7,8,9:0,1,2,3"),
                new (2, 2, "2,3", "2,3 - 1,6,7,8,9\nB2:1:X:6,7,8,9:0,1,2,3,6\nB2P:6:X:6,7,8,9:0,1,2,3\nB2P:7:X:6,7,8,9:0,1,2,3\nB2P:8:X:6,7,8,9:0,1,2,3\nB2P:9:X:6,7,8,9:0,1,2,3"),
                new (2, 6, "4,5,6,7,8,9", "4,5,6,7,8,9 - 2,3\nB3:2:R:1,2\nB3:3:R:1,2"),
                new (2, 7, "4,5,6,7,8,9", "4,5,6,7,8,9 - 2,3\nB3:2:R:1,2\nB3:3:R:1,2"),
                new (2, 8, "4,5,6,7,8,9", "4,5,6,7,8,9 - 2,3\nB3:2:R:1,2\nB3:3:R:1,2"),
              },
              false
            );
        }
        [Fact]
        public void Test4Blockade32()
        {
            CheckSudoku(new[]
              {
                " , ,7,8, ,4,3, , ",
                " , , ,7, ,2, , , ",
                "6, , ,1,9,3, , ,4",
                "5,7, ,2,3,1, ,4,9",
                " , ,9,5, , ,1, , ",
                "3,1, , , , , ,5,2",
                "7, , , ,2, , , ,5",
                " , , ,4, ,7, , , ",
                " , ,2,3, ,5,4, , ",
              },
              new ExpectResult[]
              {
                new (6, 1, "3,4", "3,4 - 6,8,9\nB2P:6:R:6,8,9:3,5,6\nB2P:8:R:6,8,9:3,5,6\nB2P:9:R:6,8,9:3,5,6"),
                new (6, 2, "1,3,4", "1,3,4 - 6,8\nB2P:6:R:6,8,9:3,5,6\nB2P:8:R:6,8,9:3,5,6"),
                new (4, 4, "4,7", "4,7 - 6,8\nB2P:6:C:5,6:0,1\nB2:8:X:6,8:5,6,8"),
                new (5, 4, "4,7", "4,7 - 6,8\nB2P:6:C:5,6:0,1\nB2:8:X:6,8:5,6,8"),
                new (7, 4, "1,8", "1,8 - 6\nB2P:6:C:5,6:0,1"),
                new (8, 4, "1,8", "1,8 - 6\nB2P:6:C:5,6:0,1"),
                new (6, 5, "6,9", "6,9 - 8\nB2P:8:X:1,8:4,7"),
                new (1, 6, "5,9", "5,9 - 6,8\nB2P:6:C:6,7,8:3,5,6\nB2P:8:C:6,7,8:3,5,6"),
                new (2, 6, "2,5", "2,5 - 7,8\nB2P:7:C:6,7,8:3,5,6\nB2P:8:C:6,7,8:3,5,6"),
                new (5, 6, "7", "7 - 6,8\nB2:6:C:6,8:3,6\nB2:8:C:6,8:3,6"),
                new (6, 6, "8", "8 - 6,9\nB3:6:R:3,5\nB3:9:R:3,5"),
                new (7, 6, "2,9", "2,9 - 6,8\nB2P:6:C:6,7,8:3,5,6\nB2P:8:C:6,7,8:3,5,6"),
                new (6, 7, "1,3", "1,3 - 6,8,9\nB2P:6:R:6,8,9:3,5,6\nB2P:8:R:6,8,9:3,5,6\nB2P:9:R:6,8,9:3,5,6"),
              },
              false
            );
        }
        [Fact]
        public void Test5XWingCol()
        {
            CheckSudoku(new[]
              {
                "9,8, , ,6,2,7,5,3",
                " ,6,5, , ,3, , , ",
                "3,2,7, ,5, , , ,6",
                "7,9, , ,3, ,5, , ",
                " ,5, , , ,9, , , ",
                "8,3,2, ,4,5, , ,9",
                "6,7,3,5,9,1,4,2,8",
                "2,4,9, ,8,7, , ,5",
                "5,1,8, ,2, , , ,7",
              },
              new ExpectResult[]
              {
                new (4, 2, "4,6", "4,6 - 1\nB4:1:C:0,4:1,4"),
                new (1, 3, "4,7,8,9", "4,7,8,9 - 1\nB4:1:C:0,4:1,4"),
                new (4, 3, "2,6,7,8", "2,6,7,8 - 1\nB4:1:C:0,4:1,4"),
                new (1, 6, "2,8,9", "2,8,9 - 1\nB4:1:C:0,4:1,4"),
                new (4, 6, "2,3,6,8", "2,3,6,8 - 1\nB4:1:C:0,4:1,4"),
                new (1, 7, "4,8,9", "4,8,9 - 1\nB4:1:C:0,4:1,4"),
                new (4, 7, "3,4,6,7,8", "3,4,6,7,8 - 1\nB4:1:C:0,4:1,4"),
                new (1, 8, "2,4", "2,4 - 1\nB4:1:C:0,4:1,4"),
                new (3, 8, "1", "1 - 2,4\nB1:2:C:1\nB1:4:C:1"),
                new (4, 8, "2,4", "2,4 - 1\nB4:1:C:0,4:1,4"),
              },
              false              
            );
        }
        [Fact]
        public void Test5XWingRow()
        {
            CheckSudoku(new[]
              {
                " ,4,1,7,2,9, ,3, ",
                "7,6,9, , ,3,4, ,2",
                " ,3,2,6,4, ,7,1,9",
                "4, ,3,9, , ,1,7, ",
                "6, ,7, , ,4,9, ,3",
                "1,9,5,3,7, , ,2,4",
                "2,1,4,5,6,7,3,9,8",
                "3,7,6, ,9, ,5,4,1",
                "9,5,8,4,3,1,2,6,7",
              },
              new ExpectResult[]
              {
                new (3, 4, "8", "8 - 5\nB4:5:R:1,4:4,7"),
              },
              false
            );
        }
        [Fact]
        public void Test6SwordfishRow1()
        {
            CheckSudoku(new[]
              {
                "1,6, ,5,4,3, ,7, ",
                " ,7,8,6, ,1,4,3,5",
                "4,3,5,8, ,7,6, ,1",
                "7,2, ,4,5,8, ,6,9",
                "6, , ,9,1,2, ,5,7",
                " , , ,3,7,6, , ,4",
                " ,1,6, ,3, , ,4, ",
                "3, , , ,8, , ,1,6",
                " , ,7,1,6,4,5, ,3",
              },
              new ExpectResult[]
              {
                new (6, 0, "5,8,9", "5,8,9 - 2\nB5:2:R:1,2,8:0,4,7"),
                new (0, 6, "8,9", "8,9 - 2\nB5:2:C:2,3,8:0,6,7"),
                new (6, 6, "7,8,9", "7,8,9 - 2\nB5:2:C:2,3,8:0,6,7"),
                new (7, 6, "7,9", "7,9 - 2\nB5:2:C:2,3,8:0,6,7"),
                new (5, 7, "8", "8 - 2\nB5:2:R:1,2,8:0,4,7"),
              },
              false
            );
        }
        [Fact]
        public void Test6SwordfishRow2()
        {
            CheckSudoku(new[]
              {
                "1, ,8,5, , ,2,3,4",
                "5, , ,3, ,2,1,7,8",
                " , , ,8, , ,5,6,9",
                "8, , ,6, ,5,7,9,3",
                " , ,5,9, , ,4,8,1",
                "3, , , , ,8,6,5,2",
                "9,8, ,2, ,6,3,1, ",
                " , , , , , ,8, , ",
                " , , ,7,8, ,9, , ",
              },
              new ExpectResult[]
              {
                new (2, 1, "2,3,7", "2,3,7 - 4\nB5:4:R:1,3,6:1,2,4"),
                new (5, 1, "1,7,9", "1,7,9 - 4\nB5:4:R:1,3,6:1,2,4"),
                new (7, 1, "1,2,3,5,6,7", "1,2,3,5,6,7 - 4\nB5:4:R:1,3,6:1,2,4"),
                new (8, 1, "1,2,3,5,6", "1,2,3,5,6 - 4\nB5:4:R:1,3,6:1,2,4"),
                new (2, 2, "2,3,7", "2,3,7 - 4\nB5:4:R:1,3,6:1,2,4"),
                new (5, 2, "1,7,9", "1,7,9 - 4\nB5:4:R:1,3,6:1,2,4"),
                new (7, 2, "1,2,3,6,7", "1,2,3,6,7 - 4\nB5:4:R:1,3,6:1,2,4"),
                new (8, 2, "1,2,3,6", "1,2,3,6 - 4\nB5:4:R:1,3,6:1,2,4"),
                new (7, 3, "1", "1 - 4\nB5:4:C:0,5,7:2,7,8"),
                new (2, 4, "1,7", "1,7 - 4\nB5:4:R:1,3,6:1,2,4"),
                new (5, 4, "1,7", "1,7 - 4\nB5:4:R:1,3,6:1,2,4"),
                new (7, 4, "1,3,5,9", "1,3,5,9 - 4\nB5:4:R:1,3,6:1,2,4"),
              },
              false
            );
        }
        [Fact]
        public void Test7JellyfishCol()
        {
            CheckSudoku(new[]
              {
                "2, ,4,1, ,3,5,8, ",
                " , , , ,2, ,3,4,1",
                "1, ,3,4,8,5,6, , ",
                "7,3,2,9,5,4,1,6,8",
                " , ,5, ,1, ,9, , ",
                "6,1,9,8,3,2,4, , ",
                " , ,1,5, ,8,2, , ",
                "3, , ,2,4, , , , ",
                " ,2,6,3, , , , ,4",
              },
              new ExpectResult[]
              {
                new (1, 1, "5,6,8,9", "5,6,8,9 - 7\nB6:7:R:0,2,5,6:1,4,7,8"),
                new (7, 1, "5,9", "5,9 - 7,8\nB2P:7:R:7,8:2,6\nB2P:8:R:7,8:2,6"),
                new (8, 4, "9", "9 - 7\nB6:7:R:0,2,5,6:1,4,7,8"),
                new (7, 5, "1,6,9", "1,6,9 - 7\nB2P:7:R:7,8:2,6"),
                new (4, 7, "2,3", "2,3 - 7\nB2P:7:R:6,7:3,5"),
                new (6, 7, "3,9", "3,9 - 7\nB2P:7:X:7,8:3,6"),
                new (7, 7, "1,5,9", "1,5,9 - 7\nB2P:7:X:7,8:3,6"),
                new (8, 7, "1,5,9", "1,5,9 - 7\nB2P:7:X:7,8:3,6"),
                new (4, 8, "2,3", "2,3 - 7\nB2P:7:R:6,7:3,5"),
                new (6, 8, "3,6,9", "3,6,9 - 7\nB2P:7:X:7,8:3,6"),
                new (7, 8, "5,6,9", "5,6,9 - 7\nB2P:7:X:7,8:3,6"),
              },
              false
            );
        }
        [Fact]
        public void Test7JellyfishRow()
        {
            CheckSudoku(new[]
              {
                "2, , , , , , , ,3",
                " ,8, , ,3, , ,5, ",
                " , ,3,4, ,2,1, , ",
                " , ,1,2, ,5,4, , ",
                " , , , ,9, , , , ",
                " , ,9,3, ,8,6, , ",
                " , ,2,5, ,6,9, , ",
                " ,9, , ,2, , ,7, ",
                "4, , , , , , , ,1",
              },
              new ExpectResult[]
              {
                new (1, 0, "1,6,9", "1,6,9 - 7\nB6:7:R:2,3,5,6:0,1,4,8"),
                new (4, 0, "3,5,6,8", "3,5,6,8 - 7\nB6:7:R:2,3,5,6:0,1,4,8"),
                new (0, 1, "1,4,5,6", "1,4,5,6 - 7\nB6:7:R:2,3,5,6:0,1,4,8"),
                new (4, 1, "2,3,4,5,6", "2,3,4,5,6 - 7\nB6:7:R:2,3,5,6:0,1,4,8"),
                new (8, 1, "3,5,6", "3,5,6 - 7\nB6:7:R:2,3,5,6:0,1,4,8"),
                new (0, 4, "1,5,6,8", "1,5,6,8 - 7\nB6:7:R:2,3,5,6:0,1,4,8"),
                new (8, 4, "8", "8 - 7\nB6:7:R:2,3,5,6:0,1,4,8"),
                new (1, 8, "2,4,6,9", "2,4,6,9 - 7\nB6:7:R:2,3,5,6:0,1,4,8"),
                new (4, 8, "2,5,8", "2,5,8 - 7\nB6:7:R:2,3,5,6:0,1,4,8"),
              },
              false
            );
        }
        [Fact]
        public void Test8XYWing()
        {
            CheckSudoku(new[]
              {
                "8,4,5,2,7,1, , ,3",
                "9, , ,6,5, ,1,8, ",
                " ,1,6,9,8, ,5,7, ",
                " , ,1,4,3,5, , ,8",
                "4,6,8,1,2,9,7,3,5",
                " , , ,7,6,8,4, ,1",
                " , , ,3,4,2,8,1,6",
                "6,8,3,5,1,7,2,4,9",
                "1,2,4,8,9,6,3,5,7",
              },
              new ExpectResult[]
              {
                new (5, 0, "3,5", "3,5 - 2\nB2P:2:R:2,9:2,7"),
                new (6, 0, "5", "5 - 7\nB7:7:52:30:62"),
                new (1, 1, "3", "3 - 7\nB7:7:52:31:12"),
                new (3, 1, "9", "9 - 7\nB7:7:20:11:30"),
                new (5, 1, "3,5", "3,5 - 9\nB2P:9:R:2,9:2,7"),
              },
              false
            );
        }
        [Fact]
        public void Test8XYWing1()
        {
            CheckSudoku(new[]
              {
                "3, , ,4,5,6,7,8,2",
                "4,8,2, , , , , , ",
                "7,6,5, , , ,3, , ",
                "5,4,6,7,1,9,2,3,8",
                "1, , ,2, , ,4,6,5",
                "8,2,3,6,4,5,9, , ",
                "9, ,8,3, , , ,2, ",
                "2, , ,8, , ,1, , ",
                "6, , ,5, , ,8, , ",
              },
              new ExpectResult[]
              {
                new (7, 1, "3,5", "3,5 - 7\nB2P:7:R:4,7:2,5"),
                new (1, 4, "3,7", "3,7 - 9\nB2:9:X:1,9:3,6"),
                new (2, 4, "2,8", "2,8 - 9\nB2P:9:X:1,3,7,9:3,4,5,6"),
                new (6, 4, "7", "7 - 6\nB7:6:77:74:66"),
                new (7, 4, "6,9", "6,9 - 7\nB2P:7:R:4,7:2,5"),
                new (1, 5, "3,7", "3,7 - 1\nB2:1:X:1,9:3,6"),
                new (2, 5, "2,8", "2,8 - 1\nB2P:1:X:1,3,7,9:3,4,5,6"),
                new (7, 7, "5,9", "5,9 - 4,7\nB2P:4:R:4,7:2,5\nB2P:7:R:4,7:2,5"),
                new (7, 8, "3,9", "3,9 - 4,6,7\nB2P:4:R:4,7:2,5\nB7:6:77:74:66\nB2P:7:R:4,7:2,5"),
              },
              false
            );
        }
        [Fact]
        public void Test8XYWing2()
        {
            CheckSudoku(new[]
              {
                "9, ,6,1,2,8,5, , ",
                " , , ,5,6, ,8, , ",
                " ,8, ,3,4, ,1, ,6",
                " , ,1,2, ,5, ,6, ",
                "2,5, ,6, ,3, , ,1",
                " , , ,8,1,4,2, ,5",
                " ,4, , ,8,1, ,5, ",
                " , , , ,3,2, ,1, ",
                " , ,3, ,5,6, , ,9",
              },
              new ExpectResult[]
              {
                new (3, 0, "4,8", "4,8 - 3,7\nB2:3:X:3,7,9:1,6,7,8\nB2:7:X:3,7,9:1,6,7,8"),
                new (8, 0, "1,8", "1,8 - 7\nB2P:7:R:4,7:3,6"),
                new (1, 1, "1,2", "1,2 - 3,7\nB2P:3:C:3,6,7,9:0,3,5,7\nB2P:7:C:3,6,7,9:0,3,5,7"),
                new (3, 1, "3,7", "3,7 - 9\nB4:9:C:4,6:3,4"),
                new (5, 1, "6,9", "6,9 - 3,7\nB2P:3:C:3,7:0,3\nB2P:7:C:3,7:0,3"),
                new (7, 1, "6,9", "6,9 - 7\nB2P:7:C:3,7:0,3"),
                new (8, 1, "1,2", "1,2 - 7\nB2P:7:R:4,7:3,6"),
                new (4, 2, "4,8", "4,8 - 7,9\nB2:7:X:3,7,9:1,6,7,8\nB2:9:X:3,7,9:1,6,7,8"),
                new (6, 2, "2,7", "2,7 - 9\nB7:9:60:63:71"),
                new (6, 3, "9", "9 - 7\nB1:7:X:9"),
                new (7, 3, "4,7", "4,7 - 9\nB7:9:60:63:71"),
                new (1, 7, "2,3,7,9", "2,3,7,9 - 4\nB3:4:R:0,2"),
                new (4, 7, "4,7,8", "4,7,8 - 9\nB3:9:C:1,2"),
                new (5, 7, "3,7", "3,7 - 9\nB3:9:C:1,2"),
                new (8, 7, "2,8", "2,8 - 4,7\nB2P:4:R:4,7:3,6\nB2P:7:R:4,7:3,6"),
                new (1, 8, "2,3,7", "2,3,7 - 4\nB3:4:R:0,2"),
              },
              false
            );
        }
        [Fact]
        public void Test8XYWing3()
        {
            CheckSudoku(new[]
              {
                "8, , ,3,6, ,9, , ",
                " , ,9, ,1, ,8,6,3",
                " ,6,3, ,8,9, , ,5",
                "9,2,4,6,7,3,1,5,8",
                "3,8,6,9,5,1,7,2,4",
                "5,7,1,8,2,4,3,9,6",
                "4,3,2,1,9,6,5,8,7",
                "6,9,8,5,3,7, , , ",
                " , , ,2,4,8,6,3,9",
              },
              new ExpectResult[]
              {
                new (1, 0, "2", "2 - 7\nB7:7:11:13:02"),
                new (1, 1, "4", "4 - 5\nB7:5:10:15:02"),
                new (0, 5, "2", "2 - 5\nB7:5:10:15:02"),
                new (1, 5, "5", "5 - 2\nB7:2:02:05:10"),
              },
              false
            );
        }
        [Fact]
        public void Test8XYWing4()
        {
            CheckSudoku(new[]
              {
                "7,1,4, ,6, ,5,3,8",
                "8, , ,4,5,3, , ,7",
                "3,5,6,7,1,8,4,2,9",
                " , , , ,2,4, ,8,5",
                "4, , , , , ,3, ,2",
                "2,8,5,3,7,6,9,4,1",
                "9,7,8,6,3,1,2,5,4",
                " , , , , ,7, , ,6",
                " , , , , , , , ,3",
              },
              new ExpectResult[]
              {
                new (3, 1, "3,6", "3,6 - 9\nB7:9:30:33:41"),
                new (3, 2, "1,3,7", "1,3,7 - 9\nB7:9:30:33:41"),
                new (4, 3, "1,5,8", "1,5,8 - 9\nB7:9:30:33:41"),
                new (4, 4, "8", "8 - 9\nB7:9:30:33:41"),
                new (4, 5, "5", "5 - 9\nB7:9:30:33:41"),
              },
              false
            );
        }
        [Fact]
        public void Test9WWing1()
        {
            CheckSudoku(new[]
              {
                "9,2,5,1,3,4,6,8,7",
                "8, , ,6,5,9,4,3,2",
                "4,3,6,7,2,8,9,5,1",
                "6,4, , ,1, ,8, , ",
                "1,5, ,4,8, , ,6, ",
                "3, ,8, ,6, , ,1,4",
                "5, , ,2,7,6,3,4,8",
                "2,6,3,8,4,1, , , ",
                "7,8,4,3,9,5,1,2,6",
              },
              new ExpectResult[]
              {
                new (3, 7, "7", "7 - 9\nB8:9:38:33:48"),
              },
              false
            );
        }
        [Fact]
        public void Test9WWing2()
        {
            CheckSudoku(new[]
              {
                "6, , ,9,5, , ,7, ",
                " , ,9, ,2, , , , ",
                " ,5,8, ,3,1, , , ",
                "1,6,4,3,8,9,7,5,2",
                " , , ,1,7,5,9,4,6",
                "5,9,7,2,4,6, , ,8",
                "9,2,5,4,1,7,6,8,3",
                " , , ,5,6,2, , , ",
                " , ,6,8,9,3, , , ",
              },
              new ExpectResult[]
              {
                new (8, 6, "1,4,5", "1,4,5 - 2\nB7:2:76:87:26"),
                new (2, 7, "6,9", "6,9 - 2\nB7:2:76:87:26"),
                new (8, 7, "2", "2 - 1\nB1:1:X:2"),
              },
              false
            );
        }
    }
}
